rules:
  - id: sider.runners.trace_writer_status
    pattern:
      - status(_, ...)
    message: |
      TraceWriter#status reads Process#exitstatus

      ProcessStatus#exitstatus is nil when the process does not exit.
      Check Process#exited? before passing a ProcessStatus object to the method.
    examples:
      - before: trace_writer.status(status)
      - before: "trace_writer.status(status, recorded_at: Time.now)"

  - id: sider.runners.sh-util-in-rake-tasks
    pattern:
      - sh(_)
    message: |
      Consider passing multiple arguments instead of a single argument to `sh` in Rake tasks.

      In case of including meta-characters or any shell specific words, passing multiple arguments is recommended.
      When passing a single argument, the command is run via the system shell (e.g. `/bin/sh`).

      See also:
      * https://www.rubydoc.info/gems/rake/FileUtils#sh-instance_method
      * https://ruby-doc.org/core/Kernel.html#method-i-exec
    justification:
      - When required to run the command via the system shell.
      - When the command has no arguments.
    examples:
      - before: |
          sh "echo #{username}"
        after: |
          sh "echo", username

  - id: sider.runners.tmpdir
    pattern:
      - Dir.tmpdir
    message: |
      Consider using `working_dir` instead of `Dir.tmpdir`.

      It is ensured that `working_dir` is deleted before the program exits.
    justification:
      - When `Dir.tmpdir` is not used for actual analyzing.
    examples:
      - before: |
          output_file = Pathname(Dir.tmpdir) / "output.json"
      - after: |
          output_file = working_dir / "output.json"

  - id: sider.runners.mktmpdir
    pattern: Dir.mktmpdir
    message: The code probably may be more simple if using `Runners::Tmpdir` instead.
    examples:
      - before: Dir.mktmpdir { |dir| puts Pathname(dir) }
        after: mktmpdir { |dir| puts dir }

  - id: sider.runners.tempfile_new
    pattern: Tempfile.new
    message: |
      Consider using `Tempfile.create` instead of `Tempfile.new`.

      `Tempfile.create` does **not** automatically remove the created file.
      On the other hand, since `Tempfile.new` removes automatically the file, smoke tests can sometimes fail.

      See https://ruby-doc.org/stdlib/libdoc/tempfile/rdoc/Tempfile.html
    examples:
      - before: |
          Tempfile.new(["rubocop-", ".json"])
      - after: |
          Tempfile.create(["rubocop-", ".json"])

  - id: sider.runners.to_i
    pattern: _.to_i
    message: |
      Be careful with the `.to_i` method.

      For example, `nil.to_i` or `"".to_i` returns `0`, but this behavior may be unexpected.
      If you want to just covert String to Integer, the `Integer` method may be suitable in most cases.

      Example:
      ```ruby
      Integer("0") #=> 0
      Integer("") #=> ArgumentError
      ```

      See also:
      * https://ruby-doc.org/core/NilClass.html#to_i-method
      * https://ruby-doc.org/core/String.html#to_i-method
      * https://ruby-doc.org/core/Kernel.html#Integer-method
    examples:
      - before: |
          result[:line].to_i
      - after: |
          Integer(result[:line])
    justification:
      - When the use of `.to_i` can make the code more simple

  - id: sider.runners.failure_message
    pattern: "Results::Failure.new(..., message: _, ...)"
    message: |
      Be careful whether the `message` is user-friendly.

      The message set to `Results::Failure` may be shown in the UI.
      For example, setting the STDERR output as the message may not be user-friendly. (a too long stack trace, etc.)
    justification:
      - When setting a user-friendly message.
    examples:
      - before: |
          Results::Failure.new(guid: guid, message: stderr, analyzer: analyzer)
        after: |
          Results::Failure.new(guid: guid, analyzer: analyzer)
