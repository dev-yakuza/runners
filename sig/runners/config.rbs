module Runners
  class Config
    class Error < UserError
      attr_reader path_name: String
      attr_reader raw_content: String

      def initialize: (String, path_name: String, raw_content: String) -> void
    end

    class BrokenYAML < Error
      attr_reader line: Integer
      attr_reader column: Integer
      attr_reader problem: String

      def initialize: (String, path_name: String, raw_content: String, line: Integer, column: Integer, problem: String) -> void
    end

    class InvalidConfiguration < Error
      attr_reader attribute: String

      def initialize: (String, path_name: String, raw_content: String, attribute: String) -> void
    end

    FILE_NAME: String
    FILE_NAME_OLD: String
    DEFAULT_METRICS_IGNORE_PATTERNS: Array[String]

    def self.load_from_dir: (Pathname) -> instance

    def self.register_warnings: () { (instance) -> void } -> void

    def self.check_warnings: (instance) -> void

    def self.invert_patterns: (Array[String]) -> Array[String]

    attr_reader path: Pathname?
    attr_reader raw_content: String?

    def initialize: (path: (Pathname | String)?, raw_content: String?) -> void

    def raw_content!: () -> String

    def content: () -> Hash[Symbol, untyped]

    def validate: () -> void

    def valid?: () -> bool

    def invalid?: () -> bool

    def path_name: () -> String

    def path_exist?: () -> bool

    def ignore_patterns: () -> Array[String]

    def metrics_ignore_patterns: () -> Array[String]

    def linter: (Symbol | String) -> Hash[Symbol, untyped]

    def linter?: (Symbol | String) -> bool

    def check_unsupported_linters: (Array[String]) -> String

    def exclude_branch?: (String) -> bool

    def parse: () -> untyped

    def field_path: (*(Symbol | String)) -> String

    def linter_field_path: (*(Symbol | String)) -> String

    def warnings: () -> Warnings

    def add_warning_for_deprecated_option: (analyzer: Symbol, old: Symbol, new: Symbol) -> void

    private

    def check_schema: (untyped) -> Hash[Symbol, untyped]
  end
end
