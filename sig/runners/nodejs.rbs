module Runners
  module Nodejs : Processor
    type constraints = Hash[String, Gem::Requirement]

    class InvalidNodeVersion < SystemError
    end

    class InvalidNpmVersion < SystemError
    end

    class InvalidYarnVersion < SystemError
    end

    class NpmInstallFailed < UserError
    end

    INSTALL_OPTION_NONE: bool
    INSTALL_OPTION_ALL: bool
    INSTALL_OPTION_PRODUCTION: String
    INSTALL_OPTION_DEVELOPMENT: String

    PACKAGE_JSON: String

    def nodejs_analyzer_local_command: () -> String

    def nodejs_analyzer_bin: () -> String

    def package_json_path: () -> Pathname

    def package_json: () -> Hash[Symbol, untyped]

    def package_lock_json_path: () -> Pathname

    def node_modules_path: () -> Pathname

    def install_nodejs_deps: (constraints: constraints, ?dependencies: Array[String], ?install_option: bool | String) -> void

    private

    def nodejs_use_local_version?: () -> bool

    def nodejs_analyzer_locally_installed?: () -> bool

    def nodejs_analyzer_global_version: () -> String

    def nodejs_analyzer_local_version: () -> String

    def npm_install: (*String, ?subcommand: String, ?flags: Array[String]) -> void

    def list_installed_npm_deps_with: (names: Array[String]) -> Hash[String, { name: String, version: String }]

    def all_npm_deps_statisfied_constraint?: (Hash[String, { name: String, version: String }], constraints) -> bool

    def npm_constraint_format: (Gem::Requirement) -> String

    def ensure_same_yarn_lock: [X] () { () -> X } -> X
  end
end
