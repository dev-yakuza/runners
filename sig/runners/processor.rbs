module Runners
  class Processor
    extend Forwardable

    def self.analyzer_id: () -> Symbol

    def self.children: () -> Hash[Symbol, singleton(Processor)]

    def self.register_config_schema: (StrongJSON::_Schema[untyped]) -> void

    def self.config_example: () -> String

    attr_reader guid: String
    attr_reader working_dir: Pathname
    attr_reader config: Config
    attr_reader shell: Shell
    attr_reader trace_writer: TraceWriter
    attr_reader warnings: Warnings

    def initialize: (guid: String, working_dir: Pathname, config: Config, shell: Shell, trace_writer: TraceWriter) -> void

    def current_dir: () -> Pathname
    def chdir: [X] (Pathname) { (Pathname) -> X } -> X
    def push_env_hash: [X] (Hash[String, String?]) { () -> X } -> X
    def env_hash: () -> Hash[String, String?]
    def capture3: (String, *Shell::command_argument, **untyped) -> [String, String, Process::Status]
    def capture3!: (String, *Shell::command_argument, **untyped) -> [String, String]
    def capture3_with_retry!: (String, *Shell::command_argument, ?tries: Integer, ?sleep: ^(Numeric) -> Numeric) -> [String, String]
    def capture3_trace: (String, *Shell::command_argument, **untyped) -> [String, String, Process::Status]

    def validate_config: () -> void

    def relative_path: (String | Pathname, ?from: Pathname) -> Pathname

    def check_unsupported_linters: () -> void

    def setup: () { () -> result } -> result

    def analyze: (Changes) -> result

    def analyzers: () -> Analyzers

    def analyzer_id: () -> Symbol

    def analyzer_name: () -> String

    def analyzer_doc: () -> String

    def analyzer_github: () -> String

    def analyzer: () -> Analyzer

    def analyzer_bin: () -> String

    def analyzer_version: () -> String

    def extract_version_option: () -> String

    def extract_version!: ((String | Array[String]) command, ?(String | Array[String]) version_option, ?pattern: Regexp pattern) -> String

    def use_git_metadata_dir?: () -> bool

    def config_linter: () -> Hash[Symbol, untyped]

    def check_root_dir_exist: () -> Results::Failure?

    def in_root_dir: [X] () { (Pathname) -> X } -> X

    def root_dir: () -> Pathname

    def missing_config_file_result: (String) -> Results::Success

    def config_field_path: (*(Symbol | String)) -> String

    def delete_unchanged_files: (Changes, ?except: Array[String], ?only: Array[String]) -> void

    def add_warning: (String, ?file: String?) -> void

    def directory_traversal_attack?: (Pathname) -> bool

    def show_runtime_versions: () -> void

    def report_file: () -> String

    def report_file_exist?: () -> bool

    def read_report_file: (?String) -> String

    class InvalidXML < SystemError
    end

    def read_xml: (String) -> REXML::Element

    def read_report_xml: (?String) -> REXML::Element

    def read_report_json: [X] (?String) { () -> X } -> (X | untyped)
                        | (?String) -> untyped

    def comma_separated_list: (String | Array[String] | nil) -> String?

    def extract_urls: (String?) -> Array[String]
  end
end
