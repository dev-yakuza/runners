module Runners
  class Processor::PmdCpd < Processor
    include Java

    class SchemaClass < StrongJSON
      include Schema::ConfigTypes

      def config: () -> StrongJSON::Type::Object[untyped]
      def issue: () -> StrongJSON::Type::Object[untyped]
    end
    SCHEMA: SchemaClass

    DEFAULT_MINIMUM_TOKENS: Integer
    DEFAULT_TARGET: String
    DEFAULT_LANGUAGES: Array[String]
    SUPPORTED_LANGUAGES: Array[String]

    attr_accessor force_option_skip_lexical_errors: bool

    private

    def all_supported_languages: () -> Array[String]

    def raise_warnings: (String) -> void

    def construct_result: (String) { (Issue) -> void } -> void

    type fileinfo = { id: String, path: Pathname, location: Location }

    def create_files_and_codefragment: (Nokogiri::XML::Node) -> [Array[fileinfo], String]

    def to_fileinfo: (Nokogiri::XML::Node) -> fileinfo

    def create_duplicated_files: (Array[fileinfo]) -> Array[untyped]

    def option_files: () -> Array[String]

    def option_encoding: () -> Array[String]

    def option_minimum_tokens: () -> Array[String]

    def languages: () -> Array[String]

    def option_language: (String) -> Array[String]

    def option_skip_duplicate_files: () -> Array[String]

    def option_non_recursive: () -> Array[String]

    def option_skip_lexical_errors: () -> Array[String]

    def option_ignore_annotations: () -> Array[String]

    def option_ignore_identifiers: () -> Array[String]

    def option_ignore_literals: () -> Array[String]

    def option_ignore_usings: () -> Array[String]

    def option_no_skip_blocks: () -> Array[String]

    def option_skip_blocks_pattern: () -> Array[String]

    def cli_options: (String) -> Array[String]
  end
end
