module Runners
  module Ruby : Processor
    type constraints = Hash[String, Gem::Requirement]

    type git_source = {
      repo: String,
      ref: String?,
      branch: String?,
      tag: String?,
    }

    type gems_item = {
      name: String,
      version: String?,
      source: String?,
      git: git_source?,
    }

    class InstallGemsFailure < UserError
    end

    def install_gems: [X] (Array[GemInstaller::Spec], constraints: constraints, ?optionals: Array[GemInstaller::Spec]) { (Hash[String, String]) -> X } -> X

    def ruby_analyzer_command: (*String) -> Command

    def default_gem_specs: (*String) -> Array[GemInstaller::Spec]

    def gem_info: (String) -> String

    private

    def default_specs: (Array[GemInstaller::Spec], constraints, LockfileLoader::Lockfile) -> Array[GemInstaller::Spec]

    def optional_specs: (Array[GemInstaller::Spec], LockfileLoader::Lockfile) -> Array[GemInstaller::Spec]

    def user_specs: (Array[GemInstaller::Spec] specs, LockfileLoader::Lockfile) -> Array[GemInstaller::Spec]

    def config_gems: () -> Array[GemInstaller::Spec]

    def merge_specs: (Array[GemInstaller::Spec], Array[GemInstaller::Spec]) -> Array[GemInstaller::Spec]
  end
end
