module Runners
  module Testing
    class Smoke
      include Minitest::Assertions

      type pattern = Hash[Symbol, untyped]

      class TestParams
        attr_reader name: String
        attr_reader pattern: pattern
        attr_reader offline: bool

        def initialize: (name: String, pattern: pattern, offline: bool) -> void
      end

      attr_reader argv: Array[String]

      def initialize: (Array[String]) -> void

      def docker_image: () -> String

      def entrypoint: () -> Pathname

      def expectations: () -> Pathname

      def run: () -> void

      def run_test: (TestParams, StringIO) -> (:passed | :failed)

      def unify_result: (Hash[Symbol, untyped], pattern, StringIO) -> bool

      def command_line: (params: TestParams, repo_dir: String, base: String, head: String) -> Array[String]

      def prepare_git_repository: (workdir: Pathname, smoke_target: Pathname, out: StringIO) -> [String, String, String]

      def debug?: () -> bool

      def debug_trace?: () -> bool

      def sh!: (*String, out: StringIO, ?exception: bool) -> [String, String]

      def colored_pretty_inspect: (untyped, ?multiline: bool) -> String

      def extra_certificate: () -> String

      def self.tests: () -> Array[TestParams]

      def self.only?: (String) -> bool

      def self.add_test: (String, **pattern) -> void

      def self.add_offline_test: (String name, **pattern) -> void

      def self.add_test_helper: (TestParams) -> void

      def self.build_pattern: (type: String,
                               ?guid: String,
                               ?timestamp: String | Symbol,
                               ?issues: Array[Hash[Symbol, untyped]]?,
                               ?message: String?,
                               ?analyzer: Hash[Symbol, untyped]?,
                               ?class: String?,
                               ?backtrace: Array[String] | Symbol | nil,
                               ?inspect: String?,
                               ?warnings: Array[Hash[Symbol, untyped]]?,
                               ?ci_config: Hash[Symbol, untyped] | Symbol | nil,
                               ?config_file: String | Symbol | nil,
                               ?version: String | Symbol | nil) -> Hash[Symbol, untyped]
    end
  end
end
