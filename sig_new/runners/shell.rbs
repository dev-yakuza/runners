type capture3_options = {
  trace_stdout: bool?,
  trace_stderr: bool?,
  trace_command_line: bool?,
  raise_on_failure: bool?,
  chdir: Pathname?,
  is_success: (^(Process::Status) -> bool)?
}

class Runners::Shell
  attr_reader trace_writer: TraceWriter
  attr_reader env_hash_stack: Array[Hash[String, String?]]
  attr_reader dir_stack: Array[Pathname]

  def initialize: (current_dir: Pathname, env_hash: Hash[String, String?], trace_writer: TraceWriter) -> untyped
  def current_dir: () -> Pathname
  def push_dir: [X] (Pathname) { () -> X } -> X
  def push_env_hash: [X] (Hash[String, String?]) { () -> X } -> X
  def env_hash: () -> Hash[String, String?]
  def capture3: (String, *String, **capture3_options) -> [String, String, Process::Status]
  def capture3!: (String, *String, **capture3_options) -> [String, String]
  def capture3_with_retry!: (String, *String, ?tries: Integer) -> [String, String]
  def capture3_trace: (String, *String, **capture3_options) -> [String, String, Process::Status]
end

class Runners::Shell::ExecError < SystemError
  attr_reader type: Symbol
  attr_reader args: Array[String]
  attr_reader stdout_str: String
  attr_reader stderr_str: String
  attr_reader status: Process::Status
  attr_reader dir: Pathname

  def initialize: (type: Symbol, args: Array[String],
                   stdout_str: String, stderr_str: String,
                   status: Process::Status, dir: Pathname) -> untyped
  def bugsnag_meta_data: () -> {
    details: {
      args: Array[String],
      stdout: String,
      stderr: String,
      status: Integer?
    }
  }
end
